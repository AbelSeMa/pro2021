suma(4, 3)                    # evalúa suma y devuelve la expresión lambda
= (lambda x, y: x + y)(4, 3)  # evalúa la expresión lambda y devuelve una función
= (lambda x, y: x + y)(4, 3)  # evalúa 4 y devuelve 4
= (lambda x, y: x + y)(4, 3)  # evalúa 3 y devuelve 3
= (lambda x, y: x + y)(4, 3)  # beta-reducción
= (4 + 3)                     # aritmética
= 7

f = lambda x, y: x + y + z
z = 9
f(2, 3)                           # evalúa f y devuelve la lambda
= (lambda x, y: x + y + z)(2, 3)  # evalúa 2 y devuelve 2
= (lambda x, y: x + y + z)(2, 3)  # evalúa 3 y devuelve 3
= (lambda x, y: x + y + z)(2, 3)  # beta-reducción
= (2 + 3 + z)                     # evalúa 2 + 3 y devuelve 5
= (5 + z)                         # evalúa z y devuelve 9
= (5 + 9)                         # evalúa 5 + 9 y devuelve 14
= 14

f = lambda x, y: (lambda z: y + z)(x)
f(2, 3)                           # evalúa f y devuelve la lambda
= (lambda x, y: (lambda z: y + z)(x))(2, 3)  # evalúa 2 y devuelve 2
= (lambda x, y: (lambda z: y + z)(x))(2, 3)  # evalúa 3 y devuelve 3
= (lambda x, y: (lambda z: y + z)(x))(2, 3)  # beta-reducción
= (lambda z: 3 + z)(2)                       # beta-reducción
= (3 + 2)                                    # aritmética
= 5


x = 4
z = 1
suma = (lambda x, y: x + y + z)(8, 12) + x
suma = 21


w = 2
f = lambda x, y: 5 + (lambda z: z + 3)(x + y)
r = f(2, 4)

f(2, 4)                   # evalúa f y devuelve la lambda
= (lambda x, y: 5 + (lambda z: z + 3)(x + y))(2, 4) # evalúa 2 y devuelve 2
= (lambda x, y: 5 + (lambda z: z + 3)(x + y))(2, 4) # evalúa 4 y devuelve 4
= (lambda x, y: 5 + (lambda z: z + 3)(x + y))(2, 4) # beta-reducción
= (5 + (lambda z: z + 3)(2 + 4))                    # evalúa 5 y devuelve 5
= (5 + (lambda z: z + 3)(2 + 4))                    # evalúa 2 + 4 y devuelve 6
= (5 + (lambda z: z + 3)(6))                        # beta-reducción
= (5 + (6 + 3))                                     # aritmética
= 14


cuadrado = lambda x: x * x
cuadrado(3 + 4)                # evalúa cuadrado y devuelve el lambda
= (lambda x: x * x)(3 + 4)     # beta-reducción
= ((3 + 4) * (3 + 4))          # aritmética
= 49

primero = lambda x, y: x

primero(4, 1 / 0)              # evalúa primero y devuelve el lambda
= (lambda x, y: x)(4, 1 / 0)   # beta-reducción
= (4)                          # es simplemente 4
= 4

divide(6, 0)                                   # evalúa divide y devuelve lambda
= (lambda x, y: x / y if y != 0 else 0)(6, 0)  # evalúa 6 y devuelve 6
= (lambda x, y: x / y if y != 0 else 0)(6, 0)  # evalúa 0 y devuelve 0
= (lambda x, y: x / y if y != 0 else 0)(6, 0)  # beta-reducción
= (6 / 0 if 0 != 0 else 0)                     # evalúa 0 != 0 y devuelve False
= (6 / 0 if False else 0)                      #


suma
suma3
prueba

<expresión> ::= ( <expresión> <opbin> <expresión> )

factorial = lambda n: 1 if n == 0 else n * factorial(n - 1)

factorial(3)
= 3 * factorial(2)
= 3 * 2 * factorial(1)
= 3 * 2 * 1 * factorial(0)
= 3 * 2 * 1 * 1
= 6

suma_rango = lambda a, b: 0 if a > b else \
                          a + suma_rango(a + 1, b)

suma_rango(2, 5)
= 2 + suma_rango(3, 5)
= 2 + (3 + suma_rango(4, 5))
= 2 + (3 + (4 + suma_rango(5, 5)))
= 2 + (3 + (4 + (5 + suma_rango(6, 5))))
= 2 + (3 + (4 + (5 + 0)))
= 2 + (3 + (4 + 5))
= 2 + (3 + 9)
= 2 + 12
= 14


fact_iter = lambda cont, acc: acc if cont == 0 else \
                              fact_iter(cont - 1, cont * acc)
factorial = lambda n: fact_iter(n, 1)

factorial(3)
= fact_iter(3, 1)
= fact_iter(2, 3)
= fact_iter(1, 6)
= fact_iter(0, 6)
= 6

TCO: Tail-Call Optimization


suma_rango(a, b) = a + ... + b

suma_rango(2, 4) = 2 + 3 + 4 = 9

a_nuevo = a_viejo + 1
b_nuevo = b_viejo
acc_nuevo = acc_viejo + a_viejo

   a         b           acc
-------- ---------    ---------
   2         4            0
   3         4            2 + 0 = 2
   4         4            2 + 3 = 5
   5    >    4            5 + 4 = 9

suma_rango_iter = lambda a, b, acc: acc if a > b else \
                                    suma_rango_iter(a + 1, b, acc + a)
suma_rang = lambda a, b: suma_rango_iter(a, b, 0)

0 1 2 3 4 5 6
0 1 1 2 3 5 8 13 21 34 55

fib(6) = 8

cont_nuevo = cont_viejo - 1
a_nuevo = b_viejo
b_nuevo = a_viejo + b_viejo

 cont     a      b
------  ----- -------
   6      0      1
   5      1      0 + 1 = 1
   4      1      1 + 1 = 2
   3      2      1 + 2 = 3
   2      3      2 + 3 = 5
   1      5      3 + 5 = 8
   0      8      5 + 8 = 13

fib_iter = lambda cont, a, b: a if cont == 0 else \
                              fib_iter(cont - 1, b, a + b)
fib = lambda n: fib_iter(n, 0, 1)

LIFO = Last In First Out

len( (1,2,3) + (4,5) )          # evalúa len y devuelve len
= len( (1,2,3) + (4,5) )        # evalúa (1,2,3) + (4,5) y devuelve (1,2,3,4,5)
= len( (1,2,3,4,5) )            # aplicación de len a (1,2,3,4,5)
= 5

suma_o_resta = lambda s: (lambda x, y: x + y) if s == 'suma' else \
                         (lambda x, y: x - y)

suma_o_resta('suma')(4, 3)  # evalúa suma_o_resta y devuelve el lambda
= (lambda s: (lambda x, y: x + y) if s == 'suma' else \
             (lambda x, y: x - y))('suma')(4, 3) # evalúa 'suma' y devuelve 'suma'
= (lambda s: (lambda x, y: x + y) if s == 'suma' else \
             (lambda x, y: x - y))('suma')(4, 3) # beta-reducción
= (lambda x, y: x + y)(4, 3) # evalúa 4 y devuelve 4
= (lambda x, y: x + y)(4, 3) # evalúa 3 y devuelve 3
= (lambda x, y: x + y)(4, 3) # beta-reducción
= (4 + 3)
= 7

def suma(x, y):
   return x + y

resultado = 7 + 3 = 10
